source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

" Keep the working directory clean
set backupdir=C:\temp\vim,.
set directory=C:\temp\vim,.
set undodir=C:\temp\vim,.

" map!ed ue to \, so leave that one as mapleader
"let maplocalleader = "ü"
"let mapleader = "ü"

" Plugins
call plug#begin('$HOME/.vim/vimfiles/plugin')
Plug 'lervag/vimtex'
Plug 'altercation/vim-colors-solarized'
Plug 'easymotion/vim-easymotion'
call plug#end()

" easymotion stuff
map <Space> <Plug>(easymotion-prefix)
map <Space><Down> <Plug>(easymotion-j)
map <Space><Up> <Plug>(easymotion-k)
let g:EasyMotion_keys = 'ratiuglfvhcqxmpbzden'

hi link EasyMotionTarget2First VimCommand
hi link EasyMotionTarget2Second VimCommand
hi link EasyMotionShade Comment

" vimtex stuff
" let g:vimtex_view_general_viewer = 'C:\Users\sgros\AppData\Local\SumatraPDF\SumatraPDF' " 'SumatraPDF'
" " let g:vimtex_view_general_viewer = 'SumatraPDF'
" let g:vimtex_view_general_options
"                 \ = '-reuse-instance -forward-search @tex @line @pdf'
" 		\ . ' -inverse-search "gvim '
" 		\ . '--servername ' . v:servername
" 		\ . ' --remote +\%l \"\%f\""'
" let g:vimtex_view_general_options_latexmk = '-reuse-instance'
" let g:latex_viewer = 'sumatrapdf'

let g:vimtex_view_general_viewer = 'wsl -- ~/.zathura_from_windows.sh'
let g:vimtex_view_general_options = '"$(wslpath -u @pdf)"'
			\ . ' --synctex-forward "@line:@col:$(wslpath -u @tex)"'
let g:latex_viewer = 'general'

let g:vimtex_syntax_enabled = 0 " Let syntax highlighting be done by solarized

" Solarized stuff
call togglebg#map("<F11>")
let g:solarized_termtrans=1
let g:solarized_termcolors=16
set background=dark
colorscheme solarized

" Make Neo arrow keys usable in visual mode
vmap <Up> k
vmap <Down> j
vmap <Right> l
vmap <Left> h

" Maximize the window
au GUIEnter * simalt ~x

if has("gui_running")
	set guifont=Consolas:h11:cANSI
endif

" Use Neo's Esc instead of this mapping
"map äp <Esc>
"map! äp <Esc>

" Follow tag
map <C-P> <C-]>

" Remap Umlaute to useful characters
" Sometimes, for some reason, mapping the literal characters does not work. In
" that case, use these alternatives:
" ü = <char-252>
" ö = <char-246> = <M-v>
" ä = <char-228> = <M-d>
map <char-252> \
map! <char-252> \
map <char-246> $
map! <char-246> $
map <char-228> #
map! <char-228> #

set scrolloff=2
set linebreak
set ruler
set number
set hlsearch
set incsearch

" Execute vim ex-commands stored as comments (first two characters of line are
" ignored, i.e. can be used to make this a comment in whatever language you
" are using)
nmap <Leader>r 0ll"cy$:exec @c<CR>

" Random stuff that should be put into different files

function! Summarize_bib()
	" collect all lines that start with an @ and append to the end of the
	" buffer, prefixed with __. Delete everything __* at the end of the file
	" before.
	silent! global/^__/d
	let entries = execute("g/^@/p", "silent!")
	norm G
	if len(getline(".")) > 0
		norm o
	endif
	silent put =entries " For some reason this starts with a blank line
	norm {dd0Gf@s__
	g/^__/s/^__\w*{/__/
	noh
	norm G{VG
	'<,'>sort
	norm zt
endfunction

function! CopyMatches(reg)
	let hits = []
	%s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/gne
	let reg = empty(a:reg) ? '+' : a:reg
	execute 'let @'.reg.' = join(hits, "\n") . "\n"'
endfunction
command! -register CopyMatches call CopyMatches(<q-reg>)

function! SynName()
	let l:s = synID(line('.'), col('.'), 1)
	echo synIDattr(l:s, 'name') . ' --> ' . synIDattr(synIDtrans(l:s), 'name')
endfunction

function! TailThis()
	autocmd BufReadPost <buffer> exec "normal! G"
endfunction
